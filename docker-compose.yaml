version: '3.4'

x-common-build-args: &common-build-args
  GITHUB_SSH_PRIVATE_KEY_BASE64: ${GITHUB_SSH_PRIVATE_KEY_BASE64-}

x-common-environment: &common-environment
  #GRPC_TRACE: tcp,http,api
  #GRPC_VERBOSITY: debug
  AES_SECRET_KEY: ${AES_SECRET_KEY-}
  AUDITEVENT_SERVICE_TYPE: ${AUDITEVENT_SERVICE_TYPE-}
  AUDITEVENT_SERVICE_URL: ${AUDITEVENT_SERVICE_URL-}
  ALERTMANAGER_SLACK_API_URL: ${ALERTMANAGER_SLACK_API_URL-}
  AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID-}
  AWS_REGION: ${AWS_REGION-}
  AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY-}
  AWS_SHIPYARD_OPERATOR_SSH_KEY_CONTENTS_B64: ${AWS_SHIPYARD_OPERATOR_SSH_KEY_CONTENTS_B64-}
  AWS_SHIPYARD_OPERATOR_SSH_KEY_PATH: ${AWS_SHIPYARD_OPERATOR_SSH_KEY_PATH-}
  AZURE_K3S_IMAGE_ID: ${AZURE_K3S_IMAGE_ID-}
  AZURE_K3S_VM_SIZE: ${AZURE_K3S_VM_SIZE-}
  AZURE_SHIPYARD_OPERATOR_PUBLIC_SSH_KEY_CONTENTS_B64: ${AZURE_SHIPYARD_OPERATOR_PUBLIC_SSH_KEY_CONTENTS_B64-}
  AZURE_SHIPYARD_OPERATOR_PUBLIC_SSH_KEY_PATH: ${AZURE_SHIPYARD_OPERATOR_PUBLIC_SSH_KEY_PATH-}
  AZURE_SHIPYARD_OPERATOR_SSH_KEY_CONTENTS_B64: ${AZURE_SHIPYARD_OPERATOR_SSH_KEY_CONTENTS_B64-}
  AZURE_SHIPYARD_OPERATOR_SSH_KEY_PATH: ${AZURE_SHIPYARD_OPERATOR_SSH_KEY_PATH-}
  BUILD_WAITING_DOMAIN: ${BUILD_WAITING_DOMAIN-}
  BUILDLOGGER_URL: ${BUILDLOGGER_URL-}
  CELERY_CONCURRENCY: 1
  CELERY_QUEUES: ${CELERY_QUEUES-celery}
  CLUSTER_MANAGER_SERVICE_ACCOUNT_JSON: ${CLUSTER_MANAGER_SERVICE_ACCOUNT_JSON-}
  DAEMON_IMAGE_PULL_POLICY: ${DAEMON_IMAGE_PULL_POLICY-}
  DAEMON_IMAGE_VERSION: ${DAEMON_IMAGE_VERSION-}
  DAEMON_SENTRY_DSN: ${DAEMON_SENTRY_DSN-}
  DATABASE_URL: ${DATABASE_URL-}
  DEBUG_DEPLOY_SERVICE_ACCOUNT: ${DEBUG_DEPLOY_SERVICE_ACCOUNT-}
  DEBUG_GITHUB_ID: ${DEBUG_GITHUB_ID-}
  DEBUG_GITHUB_LOGIN: ${DEBUG_GITHUB_LOGIN-}
  DEBUG_GITHUB_NAME: ${DEBUG_GITHUB_NAME-}
  DEBUG_GITHUB_TOKEN: ${DEBUG_GITHUB_TOKEN-}
  DEBUG_TOOLKIT_APPLICATION_PROJECTS: ${DEBUG_TOOLKIT_APPLICATION_PROJECTS-}
  DEBUG_TOOLKIT_PROJECT: ${DEBUG_TOOLKIT_PROJECT-}
  DEV: ${DEV-}
  ENABLE_HOT_RELOAD: ${ENABLE_HOT_RELOAD-}
  DEX_CA_CERT: ${DEX_CA_CERT-}
  DEX_CLIENT_CERT: ${DEX_CLIENT_CERT-}
  DEX_CLIENT_KEY: ${DEX_CLIENT_KEY-}
  DEX_DOMAIN: ${DEX_DOMAIN-}
  DEX_ROWBOAT_CLIENT_SECRET: ${DEX_ROWBOAT_CLIENT_SECRET-}
  DOCKER_PASSWORD: ${DOCKER_PASSWORD-}
  DOCKER_USERNAME: ${DOCKER_USERNAME-}
  EMAIL_CONTACT_SALES: ${EMAIL_CONTACT_SALES-}
  FLASK_DEBUG: '1'
  GCP_PROJECT: ${GCP_PROJECT-}
  GITLAB_PROVIDER_WEBHOOK_URL: ${GITLAB_PROVIDER_WEBHOOK_URL-}
  GITHUB_APP_APP_ID: ${GITHUB_APP_APP_ID-}
  GITHUB_APP_CLIENT_ID: ${GITHUB_APP_CLIENT_ID-}
  GITHUB_APP_CLIENT_KEY: ${GITHUB_APP_CLIENT_KEY-}
  GITHUB_APP_INSTALL_URL: ${GITHUB_APP_INSTALL_URL-}
  GITHUB_APP_PRIVATE_KEY: ${GITHUB_APP_PRIVATE_KEY-}
  GITHUB_APP_USER_LOGIN: ${GITHUB_APP_USER_LOGIN-}
  GITHUB_SHIPYARD_INTEGRATIONS_ACCESS_TOKEN: ${GITHUB_SHIPYARD_INTEGRATIONS_ACCESS_TOKEN-}
  GITHUB_SHIPYARD_INTEGRATIONS_USERNAME: ${GITHUB_SHIPYARD_INTEGRATIONS_USERNAME-}
  GITLAB_APP_APP_ID: ${GITLAB_APP_APP_ID-}
  GITLAB_APP_SECRET: ${GITLAB_APP_SECRET-}
  GRETEL_API_AUTH_TOKEN: ${GRETEL_API_AUTH_TOKEN-}
  GRETEL_API_URL: ${GRETEL_API_URL-}
  K3S_AMI_ID: ${K3S_AMI_ID-}
  K3S_CACHE_BUCKET: ${K3S_CACHE_BUCKET-}
  LAUNCH_DARKLY_SDK_KEY: ${LAUNCH_DARKLY_SDK_KEY-}
  MAGE_IMAGE_VERSION: ${MAGE_IMAGE_VERSION-}
  MAILJET_APIKEY_PRIVATE: ${MAILJET_APIKEY_PRIVATE-}
  MAILJET_APIKEY_PUBLIC: ${MAILJET_APIKEY_PUBLIC-}
  NAUTILUS_GRPC_CALLBACK: ${NAUTILUS_GRPC_CALLBACK-}
  OAUTHLIB_INSECURE_TRANSPORT: ${OAUTHLIB_INSECURE_TRANSPORT-}
  PRISM_GCP_SERVICE_ACCOUNT_BASE64: ${PRISM_GCP_SERVICE_ACCOUNT_BASE64-}
  PROVISIONATOR_SERVICE_URL: ${PROVISIONATOR_SERVICE_URL-}
  REACT_DEV: ${REACT_DEV-}
  REDIS_HOST: ${REDIS_HOST-}
  REGISTRY_IMAGE_VERSION: ${REGISTRY_IMAGE_VERSION-}
  RESTIC_PASSWORD: ${RESTIC_PASSWORD-}
  ROWBOAT_NAMESPACE: ${ROWBOAT_NAMESPACE-}
  SECRET_KEY: ${SECRET_KEY-}
  SECURITY_PASSWORD_SALT: ${SECURITY_PASSWORD_SALT-}
  SENTRY_DSN: ${SENTRY_DSN-}
  NAUTILUS_SENTRY_DSN: ${NAUTILUS_SENTRY_DSN-}
  SENTRY_TRACE_SAMPLE_RATE: ${SENTRY_TRACE_SAMPLE_RATE-}
  SHIPYARD_AZURE_REGION: ${SHIPYARD_AZURE_REGION-}
  SHIPYARD_AZURE_SERVICE_PRINCIPAL_ID: ${SHIPYARD_AZURE_SERVICE_PRINCIPAL_ID-}
  SHIPYARD_AZURE_SERVICE_PRINCIPAL_SECRET: ${SHIPYARD_AZURE_SERVICE_PRINCIPAL_SECRET-}
  SHIPYARD_AZURE_SUBSCRIPTION_ID: ${SHIPYARD_AZURE_SUBSCRIPTION_ID-}
  SHIPYARD_AZURE_TENANT_ID: ${SHIPYARD_AZURE_TENANT_ID-}
  SHIPYARD_CDN: ${SHIPYARD_CDN-}
  SHIPYARD_CLUSTER_CLOUD: ${SHIPYARD_CLUSTER_CLOUD-}
  SHIPYARD_CLUSTER_KUBECONFIG: ${SHIPYARD_CLUSTER_KUBECONFIG-}
  SHIPYARD_CLUSTER_NAME: ${SHIPYARD_CLUSTER_NAME-}
  SHIPYARD_CLUSTER_REGION: ${SHIPYARD_CLUSTER_REGION-}
  SHIPYARD_CLUSTER_ZONE: ${SHIPYARD_CLUSTER_ZONE-}
  SHIPYARD_DATA_ENCRYPTION_KEY: ${SHIPYARD_DATA_ENCRYPTION_KEY-}
  SHIPYARD_DOMAIN: ${SHIPYARD_DOMAIN-}
  SHIPYARD_DOMAIN_SUFFIX: ${SHIPYARD_DOMAIN_SUFFIX-}
  SHIPYARD_INSTANCE_TAG: ${SHIPYARD_INSTANCE_TAG-}
  SHIPYARD_INVITE_SIGNING_KEY: ${SHIPYARD_INVITE_SIGNING_KEY-}
  SHIPYARD_KEY_ENCRYPTION_KEY: ${SHIPYARD_KEY_ENCRYPTION_KEY-}
  SHIPYARD_RUN_MODE: ${SHIPYARD_RUN_MODE-}
  SLACK_BOT_TOKEN: ${SLACK_BOT_TOKEN-}
  SLACK_CLIENT_ID: ${SLACK_CLIENT_ID-}
  SLACK_CLIENT_SECRET: ${SLACK_CLIENT_SECRET-}
  SLACK_SIGNING_KEY: ${SLACK_SIGNING_KEY-}
  SNYK_TOKEN: ${SNYK_TOKEN-}
  SQLALCHEMY_ECHO: ${SQLALCHEMY_ECHO-}
  TERRAFORM_GCP_BASE64_SERVICE_ACCOUNT: ${TERRAFORM_GCP_BASE64_SERVICE_ACCOUNT-}
  TUGBOAT_IMAGE_REPO: ${TUGBOAT_IMAGE_REPO-}
  TUGBOAT_IMAGE_VERSION: ${TUGBOAT_IMAGE_VERSION-}
  USE_LEGACY_PROVISIONING: ${USE_LEGACY_PROVISIONING-}
  LOCAL_CA_ROOT_CERT: ${LOCAL_CA_ROOT_CERT-}
  LOCAL_CA_CRT: ${LOCAL_CA_CRT-}
  LOCAL_CA_KEY: ${LOCAL_CA_KEY-}

x-worker-service: &worker-service
  build:
    context: '.'
    args:
      GITHUB_APP_INSTALL_URL: ${GITHUB_APP_INSTALL_URL-}
      SHIPYARD_INSTANCE_TAG: ${SHIPYARD_INSTANCE_TAG-}
      REACT_DEV: ${REACT_DEV-}
      DEV: ${DEV-}
      KUBECTL_VERSION: ${KUBECTL_VERSION-}
      <<: *common-build-args
  volumes:
    - './shipyard:/srv/shipyard:ro'
    - './tests:/srv/tests:ro'
    - './manage.py:/srv/manage.py:ro'
    - './filesystem/srv/bootstrap:/srv/bootstrap'
    - './filesystem/srv/tf-dir:/srv/tf-dir'
    - './filesystem/srv/charts:/srv/charts:ro'
    - './filesystem/srv/entrypoints:/srv/entrypoints:ro'
    - './migrations:/srv/migrations'
    - '/var/run/docker.sock:/var/run/docker.sock:ro'
    - '/private/tmp:/private/tmp'
    - './localcluster.yaml:/srv/localcluster.yaml'
  depends_on:
    - redis
  command: 'tini -- /srv/entrypoints/start-celery.sh'
  networks:
    - shipyard

services:

  web:
    labels:
      shipyard.liveness.http.path: '/health'
      shipyard.liveness.initial_delay: '15'
      shipyard.liveness.period: '15'
      shipyard.readiness.http.path: '/health'
      shipyard.readiness.initial_delay: '10'
      shipyard.liveness.timeout_seconds: 15
      shipyard.readiness.period: '15'
      shipyard.route.oauth.redirect-uri: '/callback/github/oauth'
    build:
      context: '.'
      args:
        SHIPYARD_BUILD_FRONTEND: 'true'
        GITHUB_APP_INSTALL_URL: ${GITHUB_APP_INSTALL_URL}
        SHIPYARD_INSTANCE_TAG: ${SHIPYARD_INSTANCE_TAG}
        REACT_DEV: ${REACT_DEV-}
        <<: *common-build-args
    environment:
      <<: *common-environment
      ENABLE_PYROSCOPE: ${ENABLE_PYROSCOPE-}
    volumes:
      - './shipyard:/srv/shipyard:ro'
      - './manage.py:/srv/manage.py:ro'
      - './filesystem/srv/bootstrap:/srv/bootstrap'
      - './filesystem/srv/charts:/srv/charts:ro'
      - './filesystem/srv/entrypoints:/srv/entrypoints:ro'
      - './filesystem/srv/tf-dir:/srv/tf-dir'
      - './hook-examples:/srv/hook-examples:ro'
      - './migrations:/srv/migrations'
      - '/var/run/docker.sock:/var/run/docker.sock:ro'
      - '/private/tmp:/private/tmp'
      - './pyproject.toml:/srv/pyproject.toml'
      - './poetry.lock:/srv/poetry.lock'
      - './localcluster.yaml:/srv/localcluster.yaml'
    depends_on:
      - redis
      - postgres
      - heartbeat
    command: 'tini -- /srv/entrypoints/start-gunicorn.sh'
    ports:
      - '8080'
    networks:
      shipyard:
        ipv4_address: 172.99.0.42
    extra_hosts:
      - "host.docker.internal:host-gateway"
      - "org-cluster.today:host-gateway"
    stop_grace_period: 2s

  build-status:
    build:
      context: '.'
      args:
        SHIPYARD_BUILD_FRONTEND: 'false'
        SHIPYARD_INSTANCE_TAG: ${SHIPYARD_INSTANCE_TAG}
        REACT_DEV: ${REACT_DEV-}
        <<: *common-build-args
    environment:
      <<: *common-environment
    volumes:
      - './shipyard:/srv/shipyard:ro'
      - './filesystem/srv/entrypoints:/srv/entrypoints:ro'
    depends_on:
      - redis
      - postgres
      - heartbeat
    command: 'tini -- poetry run python /srv/entrypoints/buildstatus_entry_grpc.py'
    ports:
      - '8083:8081'
    networks:
      shipyard:
        ipv4_address: 172.99.0.43
    extra_hosts:
      - "host.docker.internal:host-gateway"
    attach: false
    stop_grace_period: 2s

  cluster-status:
    build:
      context: '.'
      args:
        SHIPYARD_BUILD_FRONTEND: 'false'
        SHIPYARD_INSTANCE_TAG: ${SHIPYARD_INSTANCE_TAG}
        REACT_DEV: ${REACT_DEV-}
        <<: *common-build-args
    environment:
      <<: *common-environment
    volumes:
      - './shipyard:/srv/shipyard:ro'
      - './filesystem/srv/entrypoints:/srv/entrypoints:ro'
    depends_on:
      - redis
      - postgres
      - heartbeat
    command: 'tini -- poetry run python /srv/entrypoints/clusterstatus_entry_grpc.py'
    networks:
      - shipyard
    ports:
      - '8084:8081'
    extra_hosts:
      - "host.docker.internal:host-gateway"
    stop_grace_period: 2s

  flower:
    build:
      context: '.'
      args:
        GITHUB_APP_INSTALL_URL: ${GITHUB_APP_INSTALL_URL}
        SHIPYARD_INSTANCE_TAG: ${SHIPYARD_INSTANCE_TAG}
        REACT_DEV: ${REACT_DEV-}
        DEV: ${DEV-}
        <<: *common-build-args
    environment:
      <<: *common-environment
    volumes:
      - './shipyard:/srv/shipyard:ro'
      - './filesystem/srv/entrypoints:/srv/entrypoints:ro'
    depends_on:
      - redis
      - web
    command: 'tini -- /srv/entrypoints/start-flower.sh'
    networks:
      - shipyard
    ports:
      - '8999:8081'
    stop_grace_period: 2s

  worker:
    <<: *worker-service
    environment:
      <<: *common-environment
      CELERY_ACKS_LATE: 'True'
      SHIPYARD_WORKER: 'true'
    depends_on:
      - web
    extra_hosts:
      - "host.docker.internal:host-gateway"
      - "nautilus.org-cluster.today:host-gateway"
    deploy:
      replicas: 3
    stop_grace_period: 2s

  heartbeat:
    <<: *worker-service
    labels:
      shipyard.init: 'poetry run flask db upgrade'
    environment:
      <<: *common-environment
      CELERY_ACKS_LATE: 'True'
      SHIPYARD_WORKER: 'true'
      SHIPYARD_HEARTBEAT: 'true'
    command: 'tini -- poetry run celery -A shipyard.entry.celery beat'
    networks:
      - shipyard
    stop_grace_period: 2s

  postgres:
    image: 'postgres:9.6-alpine'
    environment:
      PGDATA: '/var/lib/postgresql/data/pgdata'
      POSTGRES_USER: 'postgres'
      POSTGRES_PASSWORD: 'postgres'
      POSTGRES_DB: 'shipyard'
    volumes:
      - 'shipyard-postgres:/var/lib/postgresql/data/pgdata'
    networks:
      - shipyard
    ports:
      - '5432'
    attach: false
    stop_grace_period: 2s

  redis:
    image: 'redis:4-alpine'
    ports:
      - '6379'
    attach: false
    networks:
      - shipyard
    stop_grace_period: 2s

  registry:
    image: 'registry:2'
    volumes:
      - './volumes/registry:/var/lib/registry'
    ports:
      # - '5000:5000' # SHIPYARD_RUN_MODE local mode
      - '5000' # Any other mode
    networks:
      - shipyard
    stop_grace_period: 2s

  proxy:
    labels:
      shipyard.route: '/'
    build: 'proxy'
    depends_on:
      - web
      - build-status
    volumes:
      - './proxy/nginx.conf:/etc/nginx/conf.d/default.conf'
    networks:
      - shipyard
    ports:
      - '8080:80'
      - '8081:81'
    attach: false
    stop_grace_period: 2s

  gretel:
    labels:
      shipyard.liveness.http.path: '/healthz'
      shipyard.liveness.initial_delay: '15'
      shipyard.liveness.period: '15'
      shipyard.readiness.http.path: '/healthz'
      shipyard.readiness.initial_delay: '10'
      shipyard.readiness.period: '15'
    image: 'us-east4-docker.pkg.dev/shipyard-infra/shipyardbuild/gretel:23fa390'
    platform: linux/amd64
    environment:
      GRETEL_REDIS_URL: ${GRETEL_REDIS_URL:-redis://redis:6379/1}
      GRETEL_STORE_PROVIDER: ${GRETEL_STORE_PROVIDER:-redis}
      GRETEL_API_AUTH_TOKEN: ${GRETEL_API_AUTH_TOKEN-}
    depends_on:
      - redis
    networks:
      - shipyard
    ports:
      - '8080'
    attach: false
    stop_grace_period: 2s

  celery-prometheus-exporter:
    image: 'us-east4-docker.pkg.dev/shipyard-infra/shipyardbuild/celery-prometheus-exporter:1.0.0'
    platform: linux/amd64
    environment:
      CELERY_EXPORTER_BROKER_URL: redis://${REDIS_HOST:-redis}:6379/0
    depends_on:
      - redis
    networks:
      - shipyard
    ports:
      - '9540'
    attach: false
    stop_grace_period: 2s


############## build logger config ###########################
#
#   local use only -- do not deploy
#
##############################################################
  buildlogger:
    image: 'us-east4-docker.pkg.dev/shipyard-infra/shipyardbuild/buildlogger:latest'
    platform: linux/amd64
    environment:
      POSTGRES_USER: 'postgres'
      POSTGRES_USERNAME: 'postgres'
      POSTGRES_PASSWORD: 'postgres'
      POSTGRES_HOSTNAME: 'postgres'
      POSTGRES_DB: 'shipyard'
      POSTGRES_DATABASE: 'shipyard'
      POSTGRES_PORT: 5432
      POSTGRES_SSL_MODE: 'disable'
      PORT: 8787
    depends_on:
      - buildlogger-init
      - postgres
    networks:
      shipyard:
        ipv4_address: 172.99.0.44
    ports:
      - 8787:8787
    attach: false
    stop_grace_period: 2s

  buildlogger-init:
    image: 'us-east4-docker.pkg.dev/shipyard-infra/shipyardbuild/buildlogger-init:latest'
    platform: linux/amd64
    environment:
      POSTGRES_USER: 'postgres'
      POSTGRES_USERNAME: 'postgres'
      POSTGRES_PASSWORD: 'postgres'
      POSTGRES_HOSTNAME: 'postgres'
      POSTGRES_DB: 'shipyard'
      POSTGRES_DATABASE: 'shipyard'
      POSTGRES_PORT: 5432
      POSTGRES_SSL_MODE: 'disable'
    depends_on:
      - postgres
    logging:
      driver: none
    networks:
      - shipyard
    stop_grace_period: 2s

  pyroscope:
    image: "grafana/pyroscope"
    networks:
      - shipyard
    ports:
      - "4041:4040"
    command:
      - "server"
    attach: false

  provisionator:
    container_name: provisionator
    image: us-east4-docker.pkg.dev/shipyard-infra/shipyardbuild/provisionator/provisionator:d22a274
    networks:
      - shipyard
    ports:
      - "9080:9080"
    environment:
      - DEFAULT_RESTIC_PASSWORD=${RESTIC_PASSWORD-}
      - DEFAULT_NAUTILUS_HELM_CHART_VERSION=1.3.47
      - DEFAULT_AUTOSCALER_HELM_CHART_VERSION=0.1.8
      - PORT=9080
      - STATUS_HOSTNAME=cluster-status:8081
      - DEFAULT_BUILD_STATUS_HOSTNAME=${NAUTILUS_GRPC_CALLBACK}
      - DEFAULT_BUILD_LOG_HOSTNAME=${BUILDLOGGER_URL}
      - DEFAULT_DOCKER_IMAGE_REPOSITORY=${DEFAULT_DOCKER_IMAGE_REPOSITORY}
      - DEFAULT_AZURE_NODE_PRIVATE_SSH_KEY=${AZURE_SHIPYARD_OPERATOR_SSH_KEY_CONTENTS_B64}
      - DEFAULT_AZURE_NODE_PUBLIC_SSH_KEY=${AZURE_SHIPYARD_OPERATOR_PUBLIC_SSH_KEY_CONTENTS_B64}
      - DEFAULT_AWS_NODE_PRIVATE_SSH_KEY=${AWS_SHIPYARD_OPERATOR_SSH_KEY_CONTENTS_B64}
      - DEFAULT_GITHUB_USERNAME=${GITHUB_SHIPYARD_INTEGRATIONS_USERNAME}
      - DEFAULT_GITHUB_PASSWORD=${GITHUB_SHIPYARD_INTEGRATIONS_ACCESS_TOKEN}
      - DEFAULT_SYSTEM_GCP_PROJECT=${DEFAULT_SYSTEM_GCP_PROJECT}
      - DEFAULT_SYSTEM_GCP_CREDENTIALS=${DEFAULT_SYSTEM_GCP_CREDENTIALS}
      - DEFAULT_DOCKER_PULL_SECRET=${DEFAULT_DOCKER_PULL_SECRET}
      - LOG_LEVEL=trace
      - ROOT_DIR=/scratch
      - OPTIONS_BACKUPS=false
      - OPTIONS_DATADOG=false
      - OPTIONS_TELEPRESENCE=false
      - OPTIONS_JANITOR_REGISTRY_FREQUENCY=168h
      - OPTIONS_JANITOR_REGISTRY_CRON_SCHEDULE=30 */12 * * *
      - OPTIONS_JANITOR_CACHE_KEEP_COUNT=5
      - OPTIONS_JANITOR_CACHE_CRON_SCHEDULE=30 */12 * * *
      - OPTIONS_BUILDKIT_CACHE_MODE=max
      - K3S_NODE_DISK_SIZE=75
      - K3S_STORAGE_DISK_SIZE=100
      - K3S_MAX_BUILD_NODES=0
      - K3S_SCALING_GRACE_PERIOD=1h
      - DEFAULT_AZURE_MAIN_NODE_VM_TYPE=Standard_D4s_v5
      - DEFAULT_AZURE_BUILD_NODE_VM_TYPE=Standard_D4s_v5
      - DEFAULT_AZURE_ENV_NODE_VM_TYPE=Standard_D4s_v5
      - DEFAULT_AZURE_IMAGE_ID=/subscriptions/d808d02a-ec09-4a2b-bd29-7dcde3a75f7d/resourceGroups/shipyard-infra/providers/Microsoft.Compute/galleries/shipyard/images/shipyard-k3s
      - DEFAULT_AWS_IMAGE_ID=ami-01aec7fd3b2d9f69e
      - DEFAULT_AWS_MAIN_NODE_VM_TYPE=t2.large
      - DEFAULT_AWS_BUILD_NODE_VM_TYPE=t2.large
      - DEFAULT_AWS_ENV_NODE_VM_TYPE=t2.large
      - DEFAULT_SYSTEM_GCP_ZONE=us-east1-b
      - STATUS_INSECURE=true
      - STATUS_RETRY_TIME=5s
      - DEFAULT_BASE_HOST_NAME=shipyard-coffee
      - STORAGE_BUCKET_NAME=provisionator-state
      - KEY=rSrQhSKFhRobL2NaOUuujs8GCIUdO5nn
      - OPTIONS_OAUTH2_PROXY_OIDC_ISSUER_URL=https://${DEX_DOMAIN}
      - OPTIONS_OAUTH2_PROXY_CLIENT_SECRET=${DEX_ROWBOAT_CLIENT_SECRET}
      - OPTIONS_OAUTH2_PROXY_COOKIE_SECRET=s6o3NwpduhOOBDoJcNqSotgixmogWXp0
      - OPTIONS_OAUTH2_TUGBOAT_IMAGE_VERSION=0.1.11
      - OPTIONS_OAUTH2_SHIPYARD_HOSTNAME=localhost:8080
      - OPTIONS_OAUTH2_COOKIE_DOMAIN=.shipyard.coffee
    attach: false
    extra_hosts:
      - "host.docker.internal:host-gateway"
      - "org-cluster.today:host-gateway"
      - "nautilus.org-cluster.today:host-gateway"
    stop_grace_period: 2s

  org-cluster:
    container_name: local-org-cluster
    command: server --disable traefik --service-cidr=10.0.16.0/20 --tls-san=org-cluster.today
    image: "rancher/k3s:v1.32.0-rc1-k3s1"
    pull_policy: always
    hostname: org-cluster.local
    privileged: true
    cgroup: host
    networks:
      shipyard:
        ipv4_address: 172.99.255.200
        aliases:
          - org-cluster.today
          - nautilus.org-cluster.today
    tmpfs:
    - /run
    - /var/run
    ulimits:
      nproc: 65535
      nofile:
        soft: 65535
        hard: 65535
    deploy:
      resources:
        reservations:
          cpus: '0.5'
          memory: 1024M
    restart: always
    environment:
    - K3S_TOKEN=11837492027843
    - K3S_KUBECONFIG_OUTPUT=/output/localcluster.yaml
    - K3S_KUBECONFIG_MODE=666
    volumes:
    - ./hack/registries.yaml:/etc/rancher/k3s/registries.yaml
    - k3s-server:/var/lib/rancher/k3s
    - nfsdata:/exports/nfs
    - .:/output
    ports:
    - 6443:6443  # Kubernetes API Server
    - 80:80      # Ingress controller port 80
    - 443:443    # Ingress controller port 443
    attach: false
    stop_grace_period: 2s


volumes:
  shipyard-nfs:
  shipyard-postgres:
  vardata:
  etcdata:
  nfsdata:
  k3s-server: {}
  k3s-agent: {}

networks:
  shipyard:
    ipam:
      driver: default
      config:
        - subnet: "172.99.0.0/16"
